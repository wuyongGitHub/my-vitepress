{
  "version": 3,
  "sources": ["../../../../node_modules/dayjs/plugin/quarterOfYear.js", "../../../../node_modules/compute-scroll-into-view/src/index.ts", "../../../../node_modules/scroll-into-view-if-needed/es/index.js"],
  "sourcesContent": ["!function(t,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define(n):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs_plugin_quarterOfYear=n()}(this,(function(){\"use strict\";var t=\"month\",n=\"quarter\";return function(e,i){var r=i.prototype;r.quarter=function(t){return this.$utils().u(t)?Math.ceil((this.month()+1)/3):this.month(this.month()%3+3*(t-1))};var s=r.add;r.add=function(e,i){return e=Number(e),this.$utils().p(i)===n?this.add(3*e,t):s.bind(this)(e,i)};var u=r.startOf;r.startOf=function(e,i){var r=this.$utils(),s=!!r.u(i)||i;if(r.p(e)===n){var o=this.quarter()-1;return s?this.month(3*o).startOf(t).startOf(\"day\"):this.month(3*o+2).endOf(t).endOf(\"day\")}return u.bind(this)(e,i)}}}));", "// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n// add support for visualViewport object currently implemented in chrome\ninterface visualViewport {\n  height: number\n  width: number\n}\n\ntype ScrollLogicalPosition = 'start' | 'center' | 'end' | 'nearest'\n// This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\ntype ScrollMode = 'always' | 'if-needed'\n// New option that skips auto-scrolling all nodes with overflow: hidden set\n// See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\ntype SkipOverflowHiddenElements = boolean\n\ninterface Options {\n  block?: ScrollLogicalPosition\n  inline?: ScrollLogicalPosition\n  scrollMode?: ScrollMode\n  boundary?: CustomScrollBoundary\n  skipOverflowHiddenElements?: SkipOverflowHiddenElements\n}\n\n// Custom behavior, not in any spec\ntype CustomScrollBoundaryCallback = (parent: Element) => boolean\ntype CustomScrollBoundary = Element | CustomScrollBoundaryCallback | null\ninterface CustomScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nfunction isElement(el: any): el is Element {\n  return typeof el === 'object' && el != null && el.nodeType === 1\n}\n\nfunction canOverflow(\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nfunction getFrameElement(el: Element) {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nfunction isHiddenByFrame(el: Element): boolean {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nfunction isScrollable(el: Element, skipOverflowHiddenElements?: boolean) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nfunction alignNearest(\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nfunction getParentElement(element: Node): Element | null {\n  const parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\nexport default (target: Element, options: Options): CustomScrollAction[] => {\n  //TODO: remove this hack when microbundle will support typescript >= 4.0\n  const windowWithViewport = window as unknown as Window & {\n    visualViewport: visualViewport\n  }\n\n  const { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.width\n    : innerWidth\n  const viewportHeight = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.height\n    : innerHeight\n\n  // Newer browsers supports scroll[X|Y], page[X|Y]Offset is\n  const viewportX = window.scrollX || pageXOffset\n  const viewportY = window.scrollY || pageYOffset\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: CustomScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    const scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    const scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          viewportY,\n          viewportY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          viewportY + targetBlock,\n          viewportY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          viewportX,\n          viewportX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          viewportX + targetInline,\n          viewportX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + viewportY)\n      inlineScroll = Math.max(0, inlineScroll + viewportX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll / scaleY,\n          frame.scrollHeight - height / scaleY + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll / scaleX,\n          frame.scrollWidth - width / scaleX + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n", "import compute from 'compute-scroll-into-view';\nfunction isOptionsObject(options) {\n  return options === Object(options) && Object.keys(options).length !== 0;\n}\nfunction defaultBehavior(actions, behavior) {\n  if (behavior === void 0) {\n    behavior = 'auto';\n  }\n  var canSmoothScroll = ('scrollBehavior' in document.body.style);\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n      top = _ref.top,\n      left = _ref.left;\n    if (el.scroll && canSmoothScroll) {\n      el.scroll({\n        top: top,\n        left: left,\n        behavior: behavior\n      });\n    } else {\n      el.scrollTop = top;\n      el.scrollLeft = left;\n    }\n  });\n}\nfunction getOptions(options) {\n  if (options === false) {\n    return {\n      block: 'end',\n      inline: 'nearest'\n    };\n  }\n  if (isOptionsObject(options)) {\n    return options;\n  }\n  return {\n    block: 'start',\n    inline: 'nearest'\n  };\n}\nfunction scrollIntoView(target, options) {\n  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);\n  if (isOptionsObject(options) && typeof options.behavior === 'function') {\n    return options.behavior(isTargetAttached ? compute(target, options) : []);\n  }\n  if (!isTargetAttached) {\n    return;\n  }\n  var computeOptions = getOptions(options);\n  return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);\n}\nexport default scrollIntoView;"],
  "mappings": "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",
  "names": ["t", "n", "e", "i", "r", "s", "el", "nodeType", "canOverflow", "overflow", "skipOverflowHiddenElements", "t", "isScrollable", "clientHeight", "scrollHeight", "clientWidth", "scrollWidth", "style", "getComputedStyle", "overflowY", "overflowX", "frame", "ownerDocument", "defaultView", "frameElement", "e", "scrollingEdgeStart", "scrollingEdgeEnd", "scrollingSize", "scrollingBorderStart", "scrollingBorderEnd", "elementEdgeStart", "elementEdgeEnd", "elementSize", "target", "options", "windowWithViewport", "window", "scrollMode", "block", "inline", "boundary", "checkBoundary", "node", "isElement", "element", "parent", "scrollingElement", "document", "documentElement", "frames", "cursor", "parentElement", "getRootNode", "host", "push", "body", "viewportWidth", "visualViewport", "width", "innerWidth", "viewportHeight", "height", "innerHeight", "scrollX", "pageXOffset", "viewportY", "scrollY", "pageYOffset", "_target$getBoundingCl", "getBoundingClientRect", "targetHeight", "targetWidth", "targetTop", "top", "targetRight", "right", "targetBottom", "bottom", "targetLeft", "left", "targetBlock", "targetInline", "computations", "index", "length", "_frame$getBoundingCli", "frameStyle", "borderLeft", "parseInt", "borderLeftWidth", "borderTop", "borderTopWidth", "borderRightWidth", "borderBottom", "borderBottomWidth", "blockScroll", "inlineScroll", "scrollbarWidth", "offsetWidth", "borderRight", "scrollbarHeight", "offsetHeight", "scaleX", "scaleY", "alignNearest", "viewportX", "Math", "max", "scrollLeft", "scrollTop", "min"]
}
